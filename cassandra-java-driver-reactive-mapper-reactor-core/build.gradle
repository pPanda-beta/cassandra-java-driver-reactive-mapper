plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
    id 'org.ajoberstar.grgit' version '1.7.2'
    id 'org.ajoberstar.release-opinion' version '1.7.2'
}

repositories {
	mavenCentral()
	jcenter()
	mavenLocal()
    maven {
        url  "https://dl.bintray.com/ppanda-beta/maven"
    }
}


group 'com.ppanda'
version '0.0.1'
ext {
	artifactName = 'cassandra-java-driver-reactive-mapper-reactor-core'
	binTrayUserName = findProperty("bintrayUserName")
	bintrayApiToken = findProperty("bintrayApiToken")
	signingKey = findProperty("signingKey")
	signingPassword = findProperty("signingPassword")
}


dependencies {
	annotationProcessor 'ppanda.sharpie:interface-wrapper:0.0.1'
	annotationProcessor 'com.datastax.oss:java-driver-mapper-processor:4.5.1'

	api 'ppanda.sharpie:interface-wrapper-runtime:0.0.1'
	api 'com.datastax.oss:java-driver-mapper-runtime:4.5.1'
	api 'io.projectreactor:reactor-core:3.0.1.RELEASE'


	testAnnotationProcessor 'ppanda.sharpie:interface-wrapper:0.0.1'
	testAnnotationProcessor 'com.datastax.oss:java-driver-mapper-processor:4.5.1'

	testCompile group: 'junit', name: 'junit', version: '4.12'
	testCompile group: 'org.assertj', name: 'assertj-core', version: '3.10.0'
	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
	testCompile 'org.jeasy:easy-random-core:4.2.0'
	testCompile group: 'org.cassandraunit', name: 'cassandra-unit', version: '4.3.1.0'
	testCompile 'io.projectreactor:reactor-test:3.1.0.RELEASE'
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifactId = artifactName
			pom {
				name = 'Interface Wrapper'
				description = 'A small library to wrap interfaces with custom needs'
				licenses {
					license {
						name = 'MIT License'
						url = 'https://github.com/pPanda-beta/cassandra-java-driver-reactive-mapper/blob/master/LICENSE'
					}
				}
				developers {
					developer {
						id = 'ppanda-beta'
						name = 'Palash Das'
						email = 'dpalash.new@gmail.com'
					}
				}
			}

		}
	}

	repositories {
		maven {
			name "jCenter"
			url = "https://api.bintray.com/maven/${binTrayUserName}/maven/${artifactName}/;publish=1"
			credentials {
				username = binTrayUserName
				password = bintrayApiToken
			}
		}
	}
}

private void deleteArtifactVersion(versionId, stopOnFail = true) {
	def artifactLocation = "https://api.bintray.com/packages/${binTrayUserName}/maven/${artifactName}/versions/${versionId}"
	def basicAuthHeader = "Basic " + Base64.getEncoder().encodeToString((binTrayUserName + ":" + bintrayApiToken).getBytes())
	def deleteConnection = new URL(artifactLocation).openConnection();
	deleteConnection.setRequestMethod("DELETE")
	deleteConnection.setRequestProperty("Authorization", basicAuthHeader)
	deleteConnection.setDoOutput(true)
	deleteConnection.getOutputStream().flush()
	if (deleteConnection.getResponseCode().equals(200)) {
		println("Successfully deleted artifact " + deleteConnection.getInputStream().getText())
	} else if (stopOnFail) {
		throw new StopActionException("Failed to delete artifact " + deleteConnection.getInputStream().getText())
	}
}

task removeCurrentVersionIfExists {
	doFirst {
		deleteArtifactVersion(version, false)
	}
}
publishMavenJavaPublicationToJCenterRepository.dependsOn(removeCurrentVersionIfExists)


task removePoisonousMavenMetadataBasedFakeVersion {
	doLast {
		deleteArtifactVersion(artifactName)
	}
}

publishMavenJavaPublicationToJCenterRepository.finalizedBy(removePoisonousMavenMetadataBasedFakeVersion)

signing {
	useInMemoryPgpKeys(signingKey, signingPassword)

	sign publishing.publications.mavenJava
}
